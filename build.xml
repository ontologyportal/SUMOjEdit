<project xmlns:ivy="antlib:org.apache.ivy.ant"
         name="SUMOjEdit" default="all" basedir=".">
    <description>
        This is an ant build.xml file for building the SUMOjEdit plugin for jEdit.
    </description>

    <property name="ivy.install.version" value="2.5.3"/>
    <property name="ivy.home" value="${basedir}/.ivy"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <property name="app.name" value="SUMOjEdit"/>
    <property environment="env"/>
    <property name="jedit.home" value="${env.JEDIT_HOME}"/>
    <property name="jedit.jar" value="${env.JEDIT_JAR}"/>
    <property name="git.home" value="${env.ONTOLOGYPORTAL_GIT}"/>
    <property name="tptp.home" value="${git.home}/TPTP-ANTLR"/>
    <property name="build.home" value="build"/>
    <property name="build.test.classes" value="${build.home}/test/classes"/>
    <property name="unit.test.suite" value="com.articulate.sigma.UnitTestSuite"/>
    <property name="integration.test.suite" value="com.articulate.sigma.IntegrationTestSuite"/>
    <property name="test.unit.dir" value="test/unit/java"/>
    <property name="test.integration.dir" value="test/integration/java"/>
    <property name="reports.dir" value="${build.home}/test/results"/>
    <property name="report.html" value="file:${basedir}/${reports.dir}/html/index.html"/>

    <property name="javac.release" value="11"/>
    <property name="run.jvmargs" value="-Xmx10g -Xss1m"/>

    <property name="test.path" value="${git.home}/sumo"/>

    <path id="core.sourcepath">
        <pathelement path="src"/>
        <pathelement path="${build.home}/generated-sources"/>
    </path>

    <path id="test.sourcepath">
        <pathelement path="${test.unit.dir}/com/articulate/sigma"/>
        <pathelement path="${test.integration.dir}/com/articulate/sigma"/>
    </path>

    <condition property="isUnixNotMac">
        <and>
            <os family="unix"/>
            <not>
                <os family="mac"/>
            </not>
        </and>
    </condition>

    <!-- Build number increment target using buildnumber task -->
    <target name="increment-build-number">
        <!-- Create build.number file if it doesn't exist -->
        <mkdir dir="${basedir}"/>
        <propertyfile file="${basedir}/build.number" comment="Build Number for SUMOjEdit">
            <entry key="build.number" type="int" default="1000" operation="+" value="0"/>
        </propertyfile>

        <!-- Use Ant's built-in buildnumber task which doesn't add commas -->
        <buildnumber file="${basedir}/build.number"/>

        <!-- Load the incremented number -->
        <loadproperties srcFile="${basedir}/build.number"/>

        <!-- Get current timestamp -->
        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>

        <!-- Store the date in a separate properties file -->
        <propertyfile file="${basedir}/build.properties" comment="Build Information">
            <entry key="build.date" value="${build.date}"/>
            <entry key="build.number" value="${build.number}"/>
        </propertyfile>

        <echo message="Build number: ${build.number}"/>
        <echo message="Build date: ${build.date}"/>
    </target>

    <!-- Generate build info Java file -->
    <target name="generate-build-info" depends="increment-build-number">
        <mkdir dir="${build.home}/generated-sources/com/articulate/sigma/jedit"/>
        <echo file="${build.home}/generated-sources/com/articulate/sigma/jedit/BuildInfo.java">package com.articulate.sigma.jedit;

/**
 * Automatically generated build information.
 * DO NOT EDIT THIS FILE - it is regenerated on each build.
 */
public final class BuildInfo {
    public static final int BUILD_NUMBER = ${build.number};
    public static final String BUILD_DATE = "${build.date}";
    public static final String BUILD_VERSION = "1.1.0.${build.number}";

    private BuildInfo() {} // Prevent instantiation

    public static String getFullVersion() {
        return "SUMOjEdit v" + BUILD_VERSION + " (Build " + BUILD_NUMBER + ")";
    }

    public static String getShortVersion() {
        return "Build " + BUILD_NUMBER;
    }
}
</echo>
    </target>

    <target name="check.for.ivy.jar">
        <available file="${ivy.jar.file}" property="ivy.present"/>
    </target>

    <target name="download-ivy" depends="check.for.ivy.jar" unless="ivy.present">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load Ivy here from Ivy home, in case the user has not already dropped
                it into Ant's lib dir (note that the latter copy will always take precedence).
                We will not fail as long as local lib dir exists (it may be empty) and
                Ivy is in at least one of Ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset file="${ivy.jar.file}"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:retrieve/>

        <path id="compile.classpath">
            <pathelement path="${jedit.jar}"/>
            <fileset dir="lib">
                <include name="*.jar"/>
                <exclude name="junit*"/>
                <exclude name="hamcrest*"/>
            </fileset>
        </path>
        <path id="compile.test.classpath">
            <path refid="compile.classpath"/>
            <pathelement location="${build.home}/classes"/>
            <pathelement path="lib/hamcrest-core-1.3.jar:lib/junit-4.13.2.jar"/>
        </path>
        <path id="run.test.classpath">
            <path refid="compile.test.classpath"/>
            <pathelement location="${build.test.classes}"/>
        </path>
    </target>

    <target name="init" depends="init-ivy,generate-build-info">
        <mkdir dir="${build.home}/classes"/>
        <echo message="JEDIT_HOME is set to = ${jedit.home}"/>
        <echo message="SIGMA_HOME is set to = ${env.SIGMA_HOME}"/>
    </target>

    <target name="sigma.antlr" depends="init">
        <!-- Builds the SigmaUtils and TPTP jars as part of SigmaKEE's init -->
        <ant antfile="../sigmakee/build.xml" inheritAll="false" target="all"/>
        <copy todir="lib" file="../sigmaAntlr/sigmaAntlr.jar"/>
        <copy todir="lib" file="${tptp.home}/tptp.jar"/>
        <copy todir="lib" file="../SigmaUtils/sigmaUtils.jar"/>
        <copy todir="lib" file="../sigmakee/build/sigmakee.jar"/>
    </target>

    <target name="compile" depends="sigma.antlr" description="Compile ${app.name}">
        <!-- Increment build number first -->
        <buildnumber/>

        <javac destdir="${build.home}/classes"
               debug="on"
               optimize="on"
               deprecation="on"
               includeantruntime="false"
               classpathref="compile.classpath"
               release="${javac.release}">
            <src refid="core.sourcepath"/>
        </javac>

        <!-- Copy and process SUMOjEdit.props with build number -->
        <copy file="config/SUMOjEdit.props" todir="${build.home}/classes" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="BUILD_NUMBER" value="${build.number}"/>
                </replacetokens>
            </filterchain>
        </copy>

        <!-- Copy other resources as before -->
        <copy todir="${build.home}/classes" file="config/actions.xml"/>
        <copy todir="${build.home}/classes" file="README.txt"/>
        <copy todir="${build.home}/classes" file="index.html"/>
        <copy todir="${build.home}/classes" file="screenshot-errorlist-options.png"/>
        <copy todir="${build.home}/classes" file="toc.xml"/>
    </target>

    <target name="compile.test" depends="compile">
        <mkdir dir="${build.test.classes}"/>
        <javac destdir="${build.test.classes}"
               debug="on"
               optimize="on"
               deprecation="on"
               includeantruntime="false"
               classpathref="compile.test.classpath">
            <src refid="test.sourcepath"/>
        </javac>
        <mkdir dir="${reports.dir}"/>
    </target>

    <target name="dist" depends="compile.test" description="Create the ${app.name}.jar file and place in ${basedir}">
        <jar destfile="${app.name}.jar">
            <fileset dir="${build.home}/classes"/>
        </jar>
    </target>

    <!--
    =====
    ADMIN
    =====
    -->

    <target name="clean">
        <delete dir="${build.home}"/>
        <delete file="${app.name}.jar"/>

        <!-- for dep updates, clean ${jedit.home}/jars -->
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="lib">
                <exclude name="ErrorList.jar"/>
                <exclude name="jedit.jar"/>
            </fileset>
            <fileset dir="${jedit.home}/jars">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${jedit.home}/modes">
                <include name="catalog"/>
                 <include name="kif.xml"/>
                 <include name="TPTP.xml"/>
            </fileset>
        </delete>
    </target>
    <target name="deploy" depends="dist">
        <copy todir="${jedit.home}/jars" file="${app.name}.jar" overwrite="true"/>
        <copy todir="${jedit.home}/jars" overwrite="true">
            <fileset dir="lib">
                <exclude name="hamcrest-core*"/>
                <exclude name="junit*"/>
                <!-- including the jedit.jar in .jedit/jars causes strange problems -->
                <exclude name="jedit.jar"/>
            </fileset>
        </copy>
        <copy todir="${jedit.home}/modes" file="catalog" overwrite="true"/>
        <copy todir="${jedit.home}/modes" file="kif.xml" overwrite="true"/>
        <copy todir="${jedit.home}/modes" file="TPTP.xml" overwrite="true"/>
        <echo>deploying ${app.name}.jar, supporting files and supporting jars</echo>
    </target>

    <target name="append.bashrc" if="isUnixNotMac">
        <echo file="${user.home}/.bashrc" append="true">
# SUMOjEdit
export JEDIT_HOME=~/.jedit
export JEDIT_JAR=/usr/share/jedit/jedit.jar
alias jedit="java -Xmx10g -Xss1m -jar $JEDIT_JAR"
</echo>
    </target>

    <target name="append.zshrc" unless="isUnixNotMac">
        <echo file="${user.home}/.zshrc" append="true">
# SUMOjEdit
export JEDIT_HOME=~/Library/jEdit
export JEDIT_JAR=/Applications/jEdit.app/Contents/Java/jedit.jar
alias jedit="java -Xmx10g -Xss1m -jar $JEDIT_JAR"
</echo>
    </target>

    <target name="all" depends="clean,deploy">
        <tstamp>
            <format property="TODAY_US" pattern="yyyy-MM-dd HH:mm:ss:sss zzz" locale="en,US"/>
        </tstamp>
        <echo>the system date/time is ${TODAY_US}</echo>
    </target>

    <target name="update.sumojedit">
        <git command="pull" dir="${user.dir}">
            <args>
                <arg value="--progress"/>
                <arg value="--verbose"/>
            </args>
        </git>
    </target>

    <!-- git macro utils setup from: https://tonyyan.wordpress.com/2017/03/10/integrate-git-into-ant-targets/-->
    <macrodef name="git">
        <attribute name="command"/>
        <attribute name="dir" default="${git.home}"/>
        <element name="args" optional="true"/>
        <sequential>
            <echo message="git @{command}"/>
            <exec executable="git" dir="@{dir}">
                <arg value="@{command}"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <!--
    ===================
    RUN TASKS FOR TESTS
    ===================
    -->

    <target name="test" depends="test.unit,test.integration"/>
    <target name="test.unit" depends="compile.test" description="Runs the UnitTestSuite">
        <junit printsummary="yes"
               haltonfailure="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="run.test.classpath"/>
            </classpath>
            <test name="${unit.test.suite}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
        <antcall target="junit.report"/>
    </target>
    <target name="test.integration" depends="compile.test" description="Runs the IntegrationTestSuite">
        <junit printsummary="yes"
               haltonfailure="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="run.test.classpath"/>
            </classpath>
            <test name="${integration.test.suite}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
        <antcall target="junit.report"/>
    </target>
    <target name="junit.report" >
        <junitreport todir="${reports.dir}">
            <fileset dir="${reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.dir}/html"/>
        </junitreport>
        <antcall target="open.junit.report"/>
    </target>
    <target name="open.junit.report" depends="report.mac,report.unix"/>
    <target name="report.mac">
        <exec executable="sh" osfamily="mac">
            <arg value="-c"/>
            <arg value="open -u ${report.html}"/>
        </exec>
    </target>
    <target name="report.unix" if="isUnixNotMac">
        <exec executable="sh" osfamily="unix">
            <arg value="xdg-open ${report.html}"/>
        </exec>
    </target>

    <target name="test.kif" depends="compile.test" description="Syntax check an individual *.kif file or directory of *.kif files">
        <java classname="com.articulate.sigma.parsing.SUMOParseTest"
              classpathref="run.test.classpath"
              fork="true">
            <jvmarg line="${run.jvmargs}"/>
            <arg line="${test.path}"/>
        </java>
    </target>

</project>